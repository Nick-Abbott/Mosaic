/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
  kotlin("jvm") version "2.2.10"
  id("org.jlleitschuh.gradle.ktlint") version "12.1.0"
  id("io.gitlab.arturbosch.detekt") version "1.23.5"
  id("org.jetbrains.kotlinx.kover") version "0.7.5"
}

repositories {
  mavenCentral()
}

dependencies {
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2")
  testImplementation(kotlin("test"))
  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2")
  testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
}

// ============================================================================
// TEST CONFIGURATION
// ============================================================================

tasks.withType<Test> {
  useJUnitPlatform()

  // Ensure tests run before coverage collection
  finalizedBy("koverHtmlReport")
}

// ============================================================================
// CODE QUALITY CONFIGURATION
// ============================================================================

// ktlint configuration
ktlint {
  version.set("1.0.1")
  android.set(false)
  verbose.set(true)
  filter {
    exclude { element -> element.file.path.contains("build/") }
  }
  ignoreFailures.set(false)
  reporters {
    reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.PLAIN)
    reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.CHECKSTYLE)
    reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.HTML)
  }
}

// detekt configuration
detekt {
  config.setFrom(files("$projectDir/config/detekt/detekt.yml"))
  buildUponDefaultConfig = true
  allRules = false
  autoCorrect = true
  ignoreFailures = false
  parallel = true
}

// ============================================================================
// CODE COVERAGE CONFIGURATION
// ============================================================================

koverReport {
  filters {
    includes {
      packages("com.abbott.mosaic.*")
    }
    excludes {
      classes("**.*Test*")
      classes("**.*Test")
      classes("**.*Tests")
    }
  }

  verify {
    rule {
      isEnabled = true
      entity = kotlinx.kover.gradle.plugin.dsl.GroupingEntityType.APPLICATION

      bound {
        minValue = 80
        metric = kotlinx.kover.gradle.plugin.dsl.MetricType.LINE
        aggregation = kotlinx.kover.gradle.plugin.dsl.AggregationType.COVERED_PERCENTAGE
      }

      bound {
        minValue = 80
        metric = kotlinx.kover.gradle.plugin.dsl.MetricType.BRANCH
        aggregation = kotlinx.kover.gradle.plugin.dsl.AggregationType.COVERED_PERCENTAGE
      }
    }
  }
}

// ============================================================================
// TASK LIFECYCLE CONFIGURATION
// ============================================================================

// Create a task for code style checks
tasks.register("styleCheck") {
  group = "verification"
  description = "Run all code style and quality checks"
  dependsOn("ktlintCheck", "detekt")
}

// Create a task for coverage verification
tasks.register("coverageCheck") {
  group = "verification"
  description = "Run tests and verify coverage thresholds"
  dependsOn("test", "koverVerify")
}

// Create a comprehensive verification task
tasks.register("verifyAll") {
  group = "verification"
  description = "Run all code style, quality checks, and coverage verification"
  dependsOn("styleCheck", "coverageCheck")
}

// Configure the main check task to include all verifications
tasks.named("check") {
  dependsOn("verifyAll")
}

// Configure build task to include verification (optional)
// Uncomment the following lines if you want builds to fail on quality issues
// tasks.named("build") {
//   dependsOn("check")
// }

// ============================================================================
// CONVENIENCE TASKS
// ============================================================================

// Task to run everything needed for a complete build
tasks.register("fullBuild") {
  group = "build"
  description = "Clean, build, test, and verify everything"
  dependsOn("clean", "build", "verifyAll")
}

// Task to generate all reports
tasks.register("generateReports") {
  group = "reporting"
  description = "Generate all reports (tests, coverage, style checks)"
  dependsOn("test", "koverHtmlReport", "koverXmlReport", "ktlintCheck", "detekt")
}

// Task to fix code style issues
tasks.register("fixCodeStyle") {
  group = "verification"
  description = "Auto-fix code style issues where possible"
  dependsOn("ktlintFormat", "detektMain")
}
