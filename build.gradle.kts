/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 */

plugins {
  kotlin("jvm") version "2.2.10"
  id("org.jlleitschuh.gradle.ktlint") version "12.1.0"
  id("io.gitlab.arturbosch.detekt") version "1.23.5"
}

repositories {
  // You can declare any Maven/Ivy/file repository here.
  mavenCentral()
}

dependencies {
  implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2")
  testImplementation(kotlin("test"))
  testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2")
  testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
}

// ktlint configuration
ktlint {
  version.set("1.0.1")
  android.set(false)
  verbose.set(true)
  filter {
    exclude { element -> element.file.path.contains("build/") }
  }
  // Additional ktlint rules
  ignoreFailures.set(false)
  reporters {
    reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.PLAIN)
    reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.CHECKSTYLE)
    reporter(org.jlleitschuh.gradle.ktlint.reporter.ReporterType.HTML)
  }
}

// detekt configuration
detekt {
  config.setFrom(files("$projectDir/config/detekt/detekt.yml"))
  buildUponDefaultConfig = true
  allRules = false
  autoCorrect = true

  // Additional detekt configuration
  ignoreFailures = false
  parallel = true
}

// Add style checks to the Gradle lifecycle
tasks.named("check") {
  dependsOn("styleCheck")
}

// Create a convenient task for running all style checks
tasks.register("styleCheck") {
  group = "verification"
  description = "Run all code style and quality checks"
  dependsOn("ktlintCheck", "detekt")
}

// Add style checks to the build task (optional - uncomment if you want build to fail on style issues)
// tasks.named("build") {
//   dependsOn("check")
// }
